import admin.admin_service.aries;
import bookshop.bookshop_information.aries;
import bookshop.bookshop_messaging.aries;
import bookshop.bookshop_persistence.aries;
import bookshop.bookshop_seller_information.aries;
import bookshop.bookshop_seller_persistence.aries;
import bookshop.bookshop_supplier_persistence.aries;


protocol Bookshop2 {
	set domain("bookshop2");
	set namespace("bookshop2");

	//like travel agent
    participant Buyer {
        add channel("Public");
		set namespace("buyer");

        receive orderBooks(OrderRequest orderRequest) {
        	join transaction("bookReservation");
        	set synchronous(true);
        	
            invoke Seller.orderBooks(orderRequest) {
                message OrderAccepted: {
                    List<Book> books = purchaseBooks(books);
                    reply OrderAccepted;
                }
                message OrderRejected: {
                    reply OrderRejected;
                }
            }
        }

        receive purchaseBooks(PurchaseRequest purchaseRequest) {
        	join transaction("bookReservation");

            invoke Seller.purchaseBooks(purchaseRequest) {
                message PurchaseAccepted: {
                    reply PurchaseAccepted;
                }
                message PurchaseRejected: {
                    reply PurchaseRejected;
                }
            }
        }
    }

	//like airline co.
    participant Seller {
		add channel("Protected");
		set namespace("seller");

        receive orderBooks(OrderRequest orderRequest) {
          	join transaction("bookReservation");
            Order order = orderRequest.order;  
            List<Book> books = order.books;  
       		//bookCache.addToAvailableBooks(books);

            QueryRequest queryRequest = new QueryRequest();
            queryRequest.setBooks(books);

            invoke SupplierGroup.queryBooks(queryRequest) {
            	set timeout(3m);
            	set minResponse(4);
            	set maxResponse(10);

                message BooksAvailable: {
					bookCache.addToAvailableBooks(books);
					send SupplierGroup.reserveBooks(books);
					reply OrderAccepted(order);
                }
                
                message BooksUnavailable: {
                    reply OrderRejected(order);
                }
				
                timeout: {
                    reply OrderRejected(order);
                }

                exception: {
                    reply OrderRejected(order);
                }
            }
        }

        receive purchaseBooks(PurchaseRequest purchaseRequest) {
        	join transaction("bookReservation");
            List<Book> books = purchaseRequest.getBooks();
            Payment payment = purchaseRequest.getPayment();
    		books = bookCache.removeFromAvailableBooks(books);

            //pay for books
            //shipBooks(books, payment);
  
            ShipmentRequest shipmentRequest = new ShipmentRequest();
            shipmentRequest.setBooks(books);
            shipmentRequest.setPayment(payment);

           	invoke Supplier.shipBooks(shipmentRequest) {
            	set timeout(3m);
            	//set retry(3, 1h);

			    message ShipmentScheduled: {
        			bookCache.addToBookOrders(books);
                    //send email to customer
			    }
			    message ShipmentComplete: {
			        reply PurchaseAccepted;
			    }
			    message ShipmentFailed: {
                    //retry Supplier.shipBooks(shipmentRequest);
			        reply PurchaseRejected;
			    }
           	}
		}

        /*
        shipBooks(List<Book> books, Payment payment) {
            ShipmentRequest shipmentRequest = new ShipmentRequest();
            shipmentRequest.setBooks(books);
            shipmentRequest.setPayment(payment);

           	invoke Supplier.shipBooks(shipmentRequest) {
            	set timeout(3m);
            	//set retry(3, 1h);

			    message ShipmentScheduled: {
        			bookCache.addToBookOrders(books);
                    //send email to customer
			    }
			    message ShipmentComplete: {
			        reply PurchaseAccepted;
			    }
			    message ShipmentFailed: {
                    //retry Supplier.shipBooks(shipmentRequest);
			        reply PurchaseRejected;
			    }
           	}
        }
        */
		
		/*
        receive purchaseBooks(PurchaseRequest purchaseRequest) {
        	join transaction("bookReservation");

			execute {
            	set timeout(3m);
            	set concurrent(true);

            	Agent.purchaseBooks(purchaseRequest) {
                    message PurchaseRejected: {
            		    send Supplier.cancelShipment();
                        abort();
                    }
                }
            	
            	Supplier.shipBooks(shipmentRequest) {
	            	set timeout(3m);
	            	set retry(3, 1h);
				    message ShipmentFailed: {
                        retry Supplier.shipBooks(shipmentRequest);
				    }
            	}
            	
				done: {
            		reply PurchaseAccepted;
                    commit;
                }

				cancel: {
            		send Agent.cancelPayment();
            		send Supplier.cancelShipment();
                    abort();
				}
                
				exception: {
                    cancel();
				}

                abort() {
            		reply PurchaseRejected;
                    rollback;
                }
			}

            rescheduleShipment(ShipmentRequest shipmentRequest) {
            	send Shipper.shipBooks(shipmentRequest) {
	            	set timeout(3m);
	            	set retry(3, 1h);
            	
                    message ShipmentScheduled: {
                    }
                    
                    message ShipmentFailed: {
                    }
                }
            }
        }
        */
        
		//local
   		cache BookCache { 
    		set scope(invocation); 
	    	set transaction(required); 
		    items {
			    User user; 
			    List<Book> bookOrders; 
			    Set<Book> availableBooks; 
			    Set<Book> unavailableBooks; 
		    }
	    }
    }

	//call this network
	//make so one can "add" participants
    group SupplierGroup {
        set participant("Supplier");
        set restriction(product.onSale);
    }

    participant Supplier {
        add channel("Inventory");
        //add channel("Shipment");
		set namespace("supplier");

        //receive queryBooks(OrderRequest orderRequest) over Inventory {
        
        receive queryBooks(QueryRequest queryRequest) {
        	join transaction("bookReservation");
		    List<Book> books = queryRequest.getBooks();
		    List<Book> booksInStock = supplierOrderCacheManager.getMatchingBooksInStock(books);
		    if (booksInStock.size() == 0) {
			    replyBooksUnavailable(books);
		    } else {
			    replyBooksAvailable(booksInStock);
		    }

/*
            Iterator<Book> iterator = booksInStock.iterator();
            while (iterator.hasNext()) {
            	Book book = iterator.next();
            	shipper.scheduleShipment(book);
            }

			for (int i=0; i < booksInStock.size(); i++) {
				Book book = booksInStock.get(i);
				System.out.println(">>>" + book.getName());
			}

           	List<Book> booksInStock = SupplierCache.getFromBooksInStock(orderRequest.books);
           	//reply BooksAvailable(booksInStock);

            Iterator<Book> iterator = booksInStock.iterator();
            while (iterator.hasNext()) {
            	Book book = iterator.next();
            	shipper.scheduleShipment(book);
            }

            if (booksInStock.size() > 0) {
           	    reply BooksAvailable(booksInStock);
                System.out.println();
            } else if (booksInStock == null) {
                if (booksInStock == null)
                    System.out.println();
            } else {
                cancelBooks(books);
           	    reply BooksUnavailable(books);
            }
*/
        }

        receive reserveBooks(ReservationRequest reservationRequest) throws ReservationAbortedException {
            join transaction("bookReservation");

            //execute {
                //branch {
                	//BookOrderLog.startBookOrder(reservationRequest);
	        	    List<Book> books = reservationRequest.getBooks();
                	SupplierOrderCache.removeFromBooksInStock(books);
        	        BookInventory.addToReservedBooks(books);
                //}

                //exception: {
                //    throw ReservationAbortedException(e);
                //}
            //}
        }

        //receive shipBooks(ShipmentRequest shipmentRequest) over Shipment, Inventory {
        //   invoke Shipper.shipBooks(shipmentRequest) over Shipment {

		//@Synchronous
		//@Transacted("bookReservation")
        receive shipBooks(ShipmentRequest shipmentRequest) {
        	join transaction("bookReservation");
        	//BookOrderLog.update(shipmentRequest);

            invoke Shipper.shipBooks(shipmentRequest) {
				set transaction(required); 
				set timeout(5m); 

                message ShipmentScheduled: {
					//BookOrderLog.update(shipmentScheduled);
                    Shipment shipment = shipmentScheduled.getShipment();
					reply ShipmentScheduled(shipment);
				}
				
                message ShipmentComplete: {
                    //BookOrderLog.update(shipmentComplete);
                    Shipment shipment = shipmentComplete.getShipment();
                    List<Order> orders = shipment.getOrders();
                    BookOrderLog.addToBookOrders(orders);
                	//BookOrderLog.log(Payment);
                	post ShipmentComplete(shipment);
                	reply ShipmentComplete(shipment);
	            }
	            
                message ShipmentFailed: {
					//BookOrderLog.update(shipmentFailed);
                    Shipment shipment = shipmentFailed.getShipment();
                	reply ShipmentFailed(shipment);
				}

                exception: {
					//BookOrderLog.update(exception);
                	reply ShipmentFailed(exception.message);
                    //throw ReservationAbortedException;
                }
	        }
		}
		
		/*
		schedule {
			invoke 
		}
		*/
		
		//global
		cache SupplierOrderCache { 
			set scope(application); 
			set transaction(required); 
			set backingStore(BookOrderLog);
			items {
				Map<String, Book> booksInStock;
                /*
				List<Book> booksInStock {
					index(title);
					index(author);
				}
                */
			}
		}
				
		persist BookInventory {
			add role("supplier");
			set scope(application); 
		    add role("administrator");
			set transaction(required); 
		    set source("bookshop2_supplier");
		    set adapter("hibernate");
		    import namespace("bookshop2");
			items {
				Map<String, Book> reservedBooks {
					index(key);
					index(title);
					index(author);
				}
			}
		}

		persist BookOrderLog {
			add role("supplier");
			set scope(application); 
		    add role("administrator");
			set transaction(required); 
		    set source("bookshop2_supplier");
		    set adapter("hibernate");
		    import namespace("bookshop2");
			items {
				List<Order> bookOrders;
			}
		}
    }

    participant Shipper {
        add channel("Shipment");
		set namespace("shipper");

        receive shipBooks(ShipmentRequest shipmentRequest) {
        	join transaction("bookReservation");

        	//@Timeout(1hour)
        	listen shipmentScheduled(shipmentRequest) {
            	set timeout(3m);
        		reply ShipmentScheduled;
                timeout: {
	                reply ShipmentFailed;
                }
			}

        	//@Timeout(2days)
        	listen shipmentConfirmation(shipmentRequest) {
	            reply ShipmentComplete;
	            //reply ShipmentComplete[Summary, Invoice, Receipt];
        	}
        }
    }

}
