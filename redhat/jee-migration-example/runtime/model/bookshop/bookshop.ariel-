import admin.admin_service.aries;
import bookshop.bookshop_information.aries;
import bookshop.bookshop_messaging.aries;
import bookshop.bookshop_persistence.aries;
import bookshop.bookshop_seller_information.aries;
import bookshop.bookshop_seller_persistence.aries;
import bookshop.bookshop_supplier_persistence.aries;


protocol Bookshop2 {
	set domain("bookshop2");
	set namespace("bookshop2");

    import bookshop2-buyer.ariel;


    channel Public {

		receiver name="buyer" link="bookshop" invalid="invalidLink" />
    }

    Public(*) {
        Buyer.orderBooks(OrderRequest) {
            <- OrderAccepted
            <- OrderRejected
        }
        Buyer.purchaseBooks(PurchaseRequest) {
            <- PurchaseAccepted
            <- PurchaseRejected
        }
    }

    Protected(Buyer) {
        Seller.orderBooks(OrderRequest) {
           
            <- OrderAccepted
            <- OrderRejected
        }
        Seller.purchaseBooks(PurchaseRequest) {
            <- PurchaseAccepted
            <- PurchaseRejected
        }
    }

    Protected(Buyer) {
        Seller.orderBooks(OrderRequest) {
            accept:
                invoke SupplierGroup.queryBooks(books) {
    	            reply BooksUnavailable;
		            reply BooksAvailable(booksInStock);
                }
                reply OrderAccepted;
            decline:
                reply OrderRejected;
        }

    Inventory(seller) {

        Buyer() -> Seller.orderBooks(OrderRequest),
        Seller() -> Buyer.orderAccepted(OrderAccepted),
        Seller() -> Buyer.orderRejected(OrderRejected),
        done;



    buyer.orderBooks(OrderRequest);


	//for example, like travel agent
    participant Buyer {
        add channel("Public");
		set namespace("buyer");

        receive orderBooks(OrderRequest orderRequest) {
        	join transaction("bookReservation");
        	set synchronous(true);
        	
            invoke Seller.orderBooks() {
                message OrderAccepted: {
                    List<Book> books = order.books;
		            Payment payment = context.getPayment(); 
		            if (payment != null) {
                        send Seller.purchaseBooks(books, payment);
                    }
					reply OrderAccepted;
                    done;
                }
                message OrderRejected: {
                    reply OrderRejected;
                    done;
                }
            }
        }

        receive purchaseBooks(PurchaseRequest purchaseRequest) {
        	join transaction("bookReservation");

            invoke Seller.purchaseBooks() {
                message PurchaseAccepted: {
                    reply PurchaseAccepted;
                    done;
                }
                message PurchaseRejected: {
                    reply PurchaseRejected;
                    done;
                }
            }
        }
    }

	//for example, like airline co.
    participant Seller {
		add channel("Protected");
		set namespace("seller");

        receive orderBooks(OrderRequest orderRequest) {
          	join transaction("bookReservation");
            Order order = orderRequest.order;  
            List<Book> books = order.books;  

            //QueryRequest queryRequest = new QueryRequest();
            //queryRequest.setBooks(books);

            invoke SupplierGroup.queryBooks(books) {
            	set timeout(3min);
            	set minResponse(4);
            	set maxResponse(10);

                message BooksAvailable: {
					bookCache.addToAvailableBooks(books);
					send SupplierGroup.reserveBooks(books);
                    order.setBooks(books);
					reply OrderAccepted(order);
                    done;
                }
                
                message BooksUnavailable: {
                    order.setBooks(books);
                    String reason = "Books Unavailable";
                    reply OrderRejected(order, reason);
                    done;
                }
				
                timeout: {
                    reply OrderRejected(order);
                    done;
                }

                exception: {
                    reply OrderRejected(order);
                    done;
                }
            }
        }

        receive purchaseBooks(PurchaseRequest purchaseRequest) {
        	join transaction("bookReservation");
            List<Book> requestedBooks = order.getBooks();
            Payment payment = purchaseRequest.getPayment();
    		Set<Book> availableBooks = bookCache.removeFromAvailableBooks(requestedBooks);

            //pay for books
            //Invoice invoice = paymentManager.payForBooks(availableBooks, payment);
            Invoice invoice = factory.createInvoice();
            invoice.setOrder(order);
            invoice.setPayment(payment);
            Date dateTime = new Date();
            invoice.setTime(dateTime);
            context.setInvoice(invoice);

            Shipment shipment = factory.createShipment();
            shipment.setOrder(order);
            shipment.setTime(dateTime);
            shipment.setDate(dateTime);
            shipment.setName(name);
            shipment.setAddress(address);
            context.setShipment(shipment);

            //schedule shipment of books
           	invoke Supplier.shipBooks(shipment, payment) {
            	set timeout(3min);
            	//set retry(3, 1hr);

			    message ShipmentScheduled: {
        			bookCache.addToBookOrders(shipment.order.books);
                    //send email to customer
			    }
			    message ShipmentComplete: {
			        reply PurchaseAccepted;
                    done;
			    }
			    message ShipmentFailed: {
                    //retry Supplier.shipBooks(shipmentRequest);
			        reply PurchaseRejected;
                    done;
			    }
           	}
		}

        /*
        private Invoice payForBooks(List<Book> books, Payment payment) {
            Invoice invoice = factory.createInvoice();
            context.setInvoice(invoice);
            return invoice;
        }
        */

		//local
   		cache BookCache { 
    		set scope(invocation); 
	    	set transaction(required); 
		    items {
			    User user; 
			    List<Book> bookOrders; 
			    Set<Book> availableBooks; 
			    Set<Book> unavailableBooks; 
		    }
	    }
    }

	//call this network
	//make so one can "add" participants
    group SupplierGroup {
        set participant("Supplier");
        set restriction(product.onSale);
    }

    participant Supplier {
        add channel("Inventory");
		set namespace("supplier");

        //receive queryBooks(OrderRequest orderRequest) over Inventory {
        
        receive queryBooks(QueryRequest queryRequest) {
        	join transaction("bookReservation");
		    List<Book> books = queryRequest.getBooks();
		    List<Book> booksInStock = supplierOrderCacheManager.getMatchingBooksInStock(books);
		    if (booksInStock.size() == 0) {
			    reply BooksUnavailable;
		    } else {
			    reply BooksAvailable(booksInStock);
		    }
            done;
        }

        receive reserveBooks(ReservationRequest reservationRequest) throws ReservationAbortedException {
            join transaction("bookReservation");
       	    List<Book> books = reservationRequest.getBooks();
           	SupplierOrderCache.removeFromBooksInStock(books);
   	        BookInventory.addToReservedBooks(books);
            done;
        }

        //receive shipBooks(ShipmentRequest shipmentRequest) over Shipment, Inventory {
        //   invoke Shipper.shipBooks(shipmentRequest) over Shipment {

		//@Synchronous
		//@Transacted("bookReservation")
        receive shipBooks(ShipmentRequest shipmentRequest) {
        	join transaction("bookReservation");
        	//BookOrderLog.update(shipmentRequest);

            invoke Shipper.shipBooks() {
				set transaction(required); 
				set timeout(5min); 

                message ShipmentScheduled: {
					//BookOrderLog.update(shipmentScheduled);
                    Shipment shipment = shipmentScheduled.getShipment();
					reply ShipmentScheduled(shipment);
                    done;
				}
				
                message ShipmentComplete: {
                    //BookOrderLog.update(shipmentComplete);
                    Shipment shipment = shipmentComplete.getShipment();
                    Order order = shipment.getOrder();
                    BookOrderLog.addToBookOrders(order);
                	//BookOrderLog.log(Payment);
                	post ShipmentComplete(shipment);
                	reply ShipmentComplete(shipment);
                    done;
	            }
	            
                message ShipmentFailed: {
					//BookOrderLog.update(shipmentFailed);
                    Shipment shipment = context.getShipment();
                	reply ShipmentFailed(shipment);
                    done;
				}

                exception: {
					//BookOrderLog.update(exception);
                	reply ShipmentFailed(exception.message);
                    //throw ReservationAbortedException;
                    done;
                }
	        }
		}
		
		/*
		schedule {
			invoke 
		}
		*/
		
		//global
		cache SupplierOrderCache { 
			set scope(application); 
			set transaction(required); 
			set backingStore(BookOrderLog);
			items {
				Map<String, Book> booksInStock;
                /*
				List<Book> booksInStock {
					index(title);
					index(author);
				}
                */
			}
		}
				
		persist BookInventory {
			add role("supplier");
			set scope(application); 
		    add role("administrator");
			set transaction(required); 
		    set source("bookshop2_supplier");
		    set adapter("hibernate");
		    import namespace("bookshop2");
			items {
				Map<String, Book> reservedBooks {
					index(key);
					index(title);
					index(author);
				}
			}
		}

		persist BookOrderLog {
			add role("supplier");
			set scope(application); 
		    add role("administrator");
			set transaction(required); 
		    set source("bookshop2_supplier");
		    set adapter("hibernate");
		    import namespace("bookshop2");
			items {
				List<Order> bookOrders;
			}
		}
    }

    participant Shipper {
        add channel("Shipment");
		set namespace("shipper");

        receive shipBooks(ShipmentRequest shipmentRequest) {
        	join transaction("bookReservation");

        	//@Timeout(1hour)
        	listen ShipmentScheduled {
            	set timeout(1hr);

        		reply ShipmentScheduled;

                timeout: {
	                reply ShipmentFailed(reason);
                    done;
                }
                exception: {
	                reply ShipmentFailed(cause);
                    done;
                }
			}

        	//@Timeout(2days)
        	listen ShipmentConfirmed {
            	set timeout(2day);

                Invoice invoice = context.createInvoice();
	            reply ShipmentComplete(invoice);
                done;

                timeout: {
	                reply ShipmentFailed(reason);
                    done;
                }
                exception: {
	                reply ShipmentFailed(cause);
                    done;
                }
        	}
        }
    }

}
