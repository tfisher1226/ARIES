WIKI Environment
--------------------------

A Wiki env. is a website for the team that can include many links to useful info. as well as info relflecting development status.  Such a wiki can be started with minimal effort but will grow gradually over time to become more and more valuable and useful.  The wiki enhances teamwork and team-thinking and (like the software being developed) is a result of the teams collective efforts.

The Wiki will develop over time to become a valuable asset as well as knowledge base and record of activity.

The Wiki can include the following:

Info that is added/maintained by team members:  This can initially be just a single webpage that contains useful links:
1) Links to various help documents
2) Links to javadocs of common open-source packages
3) Links to useful documents for team members
4) Links to tutorials that are relevent to the team
5) Link to the SVN as well as links to common downloads

Can also include descriptions of work:
6) Story descriptions with associated tasks and status

Can also include info automatically generated by builds and tests:
1) build results
2) test results
3) javadocs

Can also include other things as well:
6) A personal home-pages for each team member


Development Environment
--------------------------

We can provide a common version of the Eclipse IDE to each developer.  This version of Eclipse will have all necessary plugins and configuration settings already specified.

Eclipse Galileo Enterprise Version 3.5+
Additional plugins:
        Maven M2 integration
        SVN Subclipse integration 
        Eclipse modeling framework
        AspectJ development tools

We can also provide an organized set of Eclipse workspaces (only one for now to start with) to each developer.  Each workspace will be represented by a single "Project Set File" (PSF) that the developer simply "imports".  The import process will automatically check-out from SVN and create all specified projects.

The PSF files can be accessed from and maintained within SVN.  

A workspace is defined by the following:
1) a list of accessible projects 
2) a configured list of build targets 
3) a configured list of runnable tests
4) a configured list of runnable executables (each including specific argument values)

In addition to the developer's local development enviroment, global things shared by the team include the following:
1) source code control repository - specific SVN repository
2) continuous source code build and verification env. (see Build Environment)
3) team wiki site for links, notes, plans and results can be organized (see Wiki Enviornment)



Build Environment
--------------------------

Local: Each developer will have his/her own build env. (as part of his/her workspace).  

Remote: The team can have an independent build env. for continuous execution of build processes.  Each execution will generate a report that is made available online at the team WIKI.


The build env. (both local and remote) consists of the following:
1) a set of build targets
2) a set of configuration files
3) a set of software compoinents to be built
4) a set of tests to be run as part of the build process
5) a set of deliverables (i.e. that which is produced by the build)



Runtime Environment
--------------------------

Software systems and components
-----------------------
JBoss ESB
JBoss Seam
Hibernate
Spring
Maven


Software technologies (languages, APIs)
Java
JPA

Communication technologies
Webservices
JMS Messaging



Testing environment
--------------------------

This is an env. dedicated to the testing and verification of software components.  This env. exists independent from the developer's local computing env. (i.e. their local machine).  One or more of these test env.'s can be setup for developers to share on a one-by-one basis.  

Typical usage consists of developer first running a script to clean the env. then running a script to deploy his/her software components into the env.  The developer will then use "start" and "stop" scripts to bring the env. up and down.


Integration environment
--------------------------

This essenially is a verification and staging environment for deployments into production.  All aspects and settings in this env. should mirror that which exists in the production env.

Typical usage results from team coordination.  Team will agree upon and schedule what is to be integrated, what verifications shall be performed, and what times the deployments and verifications will occur.  Developers may or may not have deployment access.  If not, then coordination with appropriate admin personnel will be needed.


