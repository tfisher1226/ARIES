package org.aries.tx.fault;

import java.io.PrintWriter;
import java.io.StringWriter;


/**
 * Class representing a Fault
 */
@SuppressWarnings("serial")
public class Fault extends RuntimeException {

	/**
	 * The fault type.
	 */
	protected FaultType faultType;

	/**
	 * The fault subcode.
	 */
	protected String subcode;

	/**
	 * The fault reason.
	 */
	protected String reason;

	/**
	 * The fault reason.
	 */
	protected String node;

	/**
	 * The fault detail as a string.
	 */
	protected String detail;

	/**
	 * The fault role.
	 */
	protected String role;

	/**
	 * The header fault flag.
	 */
	protected boolean headerFault;

	/**
	 * The associated action.
	 */
	protected String action;

//	/**
//	 * Default constructor. 
//	 */
//	protected Fault() {
//	}

	/**
	 * Construct a fault based on a message.
	 * @param message The fault reason.
	 */
	public Fault(String reason) {
		this(FaultType.FAULT_RECEIVER, null, reason, null);
	}

	/**
	 * Construct a fault based on a throwable.
	 * @param th The throwable.
	 */
	public Fault(Throwable e) {
		this(FaultType.FAULT_RECEIVER, null, e.toString(), generateStackTrace(e));
	}

	/**
	 * Create a custom fault.
	 * @param soapFaultType the fault type.
	 * @param reason The fault reason.
	 */
	public Fault(FaultType faultType, String reason) {
		this(faultType, null, reason, null);
	}

	/**
	 * Create a custom fault.
	 * @param soapFaultType the fault type.
	 * @param subcode The fault subcode.
	 * @param reason The fault reason.
	 */
	public Fault(FaultType faultType, String subcode, String reason) {
		this(faultType, subcode, reason, null);
	}

	/**
	 * Create a custom fault.
	 * @param soapFaultType the fault type.
	 * @param subcode The fault subcode.
	 * @param reason The fault reason.
	 * @param detail The fault detail.
	 */
	public Fault(FaultType faultType, String subcode, String reason, String detail) {
		this.faultType = faultType;
		this.subcode = subcode;
		this.reason = reason;
		this.detail = detail;
	}

	/**
	 * Get the fault type.
	 * @return The fault type.
	 */
	public FaultType getFaultType() {
		return faultType;
	}

	/**
	 * Set the fault type.
	 * @param soapFaultType The fault type.
	 */
	public void setFaultType(final FaultType faultType) {
		this.faultType = faultType;
	}

	/**
	 * Get the fault subcode.
	 * @return The fault subcode.
	 */
	public String getSubcode() {
		return subcode;
	}

	/**
	 * Set the fault subcode.
	 * @param subcode The fault subcode.
	 */
	public void setSubcode(String subcode) {
		this.subcode = subcode;
	}

	/**
	 * Get the fault reason.
	 * @return The fault reason.
	 */
	public String getReason() {
		return reason;
	}

	/**
	 * Set the fault reason.
	 * @param reason The fault reason.
	 */
	public void setReason(String reason) {
		this.reason = reason;
	}

	/**
	 * Get the fault node.
	 * @return The fault node.
	 */
	public String getNode() {
		return node;
	}

	/**
	 * Set the fault node.
	 * @param node The fault node.
	 */
	public void setNode(String node) {
		this.node = node;
	}

	/**
	 * Get the fault role.
	 * @return The fault role.
	 */
	public String getRole() {
		return role;
	}

	/**
	 * Set the fault role.
	 * @param role The fault role.
	 */
	public void setRole(String role) {
		this.role = role;
	}

	/**
	 * Get the fault detail.
	 * @return The fault detail.
	 */
	public String getDetail() {
		return detail;
	}

	/**
	 * Set the fault detail.
	 * @param detail The fault detail.
	 */
	public void setDetail(String detail) {
		this.detail = detail;
	}

	/**
	 * Is this a fault from a header?
	 * @return true if generated by a header, false otherwise.
	 */
	public boolean isHeaderFault() {
		return headerFault;
	}

	/**
	 * Set the header fault flag.
	 * @param headerFault true if generated by a header, false otherwise.
	 */
	public void setHeaderFault(boolean headerFault) {
		this.headerFault = headerFault;
	}

	/**
	 * Get the fault action.
	 * @return The fault action.
	 */
	public String getAction() {
		return action;
	}

	/**
	 * Set the fault action.
	 * @param action The fault action.
	 */
	public void setAction(String action) {
		this.action = action;
	}

	/**
	 * Get a message describing this fault.
	 * @return The fault message.
	 */
	public String getMessage() {
		StringBuffer buffer = new StringBuffer(faultType.getValue());
		if (subcode != null) {
			buffer.append('[');
			buffer.append(subcode);
			buffer.append(']');
		}
		if (reason != null) {
			buffer.append('[');
			buffer.append(reason);
			buffer.append(']');
		}
		if (detail != null) {
			buffer.append('[');
			buffer.append(detail);
			buffer.append(']');
		}
		return buffer.toString();
	}

	/**
	 * Generate a stack trace from a throwable.
	 * @param exception The throwable.
	 * @return The stack trace.
	 */
	public static String generateStackTrace(Throwable exception) {
		final StringWriter stringWriter = new StringWriter();
		final PrintWriter printWriter = new PrintWriter(stringWriter);
		exception.printStackTrace(printWriter);
		if (!printWriter.checkError()) {
			printWriter.close();
			return stringWriter.toString();
		}
		return null;
	}

}
