package org.aries.common.entity;

import java.lang.String;
import java.util.Date;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.aries.common.entity.AttachmentEntity;
import org.aries.common.entity.EmailAddressListEntity;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.ForeignKey;

/**
 * Generated by Nam.
 *
 */
@Entity(name = "Notification")
@Table(name = "notification")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class NotificationEntity {

	@Id
	@GeneratedValue
	@Column(name = "id")
	private Long id;

	@Column(name = "content")
	private String content;

	@Column(name = "subject")
	private String subject;

	@Column(name = "timestamp")
	@Temporal(TemporalType.TIMESTAMP)
	private Date timestamp;

	@Column(name = "source_id")
	private String sourceId;

	@Column(name = "smtp_host")
	private String smtpHost;

	@Column(name = "smtp_port")
	private String smtpPort;

	@Column(name = "send_as_html")
	private Boolean sendAsHtml;

	@JoinColumn(name = "id")
	@OneToMany(cascade = CascadeType.ALL, targetEntity = EmailAddressListEntity.class)
	@ForeignKey(name = "notification_entity_to_address_list_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private List<EmailAddressListEntity> toAddressList;

	@JoinColumn(name = "from_address", referencedColumnName = "id")
	@OneToOne(cascade = CascadeType.ALL)
	@ForeignKey(name = "notification_entity_from_address_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private EmailAddressListEntity fromAddress;

	@JoinColumn(name = "id")
	@OneToMany(cascade = CascadeType.ALL, targetEntity = EmailAddressListEntity.class)
	@ForeignKey(name = "notification_entity_bcc_address_list_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private List<EmailAddressListEntity> bccAddressList;

	@JoinColumn(name = "id")
	@OneToMany(cascade = CascadeType.ALL, targetEntity = EmailAddressListEntity.class)
	@ForeignKey(name = "notification_entity_cc_address_list_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private List<EmailAddressListEntity> ccAddressList;

	@JoinColumn(name = "id")
	@OneToMany(cascade = CascadeType.ALL, targetEntity = EmailAddressListEntity.class)
	@ForeignKey(name = "notification_entity_replyto_address_list_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private List<EmailAddressListEntity> replytoAddressList;

	@JoinColumn(name = "id")
	@OneToMany(cascade = CascadeType.ALL, targetEntity = EmailAddressListEntity.class)
	@ForeignKey(name = "notification_entity_admin_address_list_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private List<EmailAddressListEntity> adminAddressList;

	@JoinColumn(name = "id")
	@OneToMany(cascade = CascadeType.ALL, targetEntity = AttachmentEntity.class)
	@ForeignKey(name = "notification_entity_attachments_fk")
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	private List<AttachmentEntity> attachments;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public Date getTimestamp() {
		return timestamp;
	}

	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

	public String getSourceId() {
		return sourceId;
	}

	public void setSourceId(String sourceId) {
		this.sourceId = sourceId;
	}

	public String getSmtpHost() {
		return smtpHost;
	}

	public void setSmtpHost(String smtpHost) {
		this.smtpHost = smtpHost;
	}

	public String getSmtpPort() {
		return smtpPort;
	}

	public void setSmtpPort(String smtpPort) {
		this.smtpPort = smtpPort;
	}

	public Boolean getSendAsHtml() {
		return sendAsHtml;
	}

	public void setSendAsHtml(Boolean sendAsHtml) {
		this.sendAsHtml = sendAsHtml;
	}

	public List<EmailAddressListEntity> getToAddressList() {
		return toAddressList;
	}

	public void setToAddressList(List<EmailAddressListEntity> toAddressList) {
		this.toAddressList = toAddressList;
	}

	public EmailAddressListEntity getFromAddress() {
		return fromAddress;
	}

	public void setFromAddress(EmailAddressListEntity fromAddress) {
		this.fromAddress = fromAddress;
	}

	public List<EmailAddressListEntity> getBccAddressList() {
		return bccAddressList;
	}

	public void setBccAddressList(List<EmailAddressListEntity> bccAddressList) {
		this.bccAddressList = bccAddressList;
	}

	public List<EmailAddressListEntity> getCcAddressList() {
		return ccAddressList;
	}

	public void setCcAddressList(List<EmailAddressListEntity> ccAddressList) {
		this.ccAddressList = ccAddressList;
	}

	public List<EmailAddressListEntity> getReplytoAddressList() {
		return replytoAddressList;
	}

	public void setReplytoAddressList(List<EmailAddressListEntity> replytoAddressList) {
		this.replytoAddressList = replytoAddressList;
	}

	public List<EmailAddressListEntity> getAdminAddressList() {
		return adminAddressList;
	}

	public void setAdminAddressList(List<EmailAddressListEntity> adminAddressList) {
		this.adminAddressList = adminAddressList;
	}

	public List<AttachmentEntity> getAttachments() {
		return attachments;
	}

	public void setAttachments(List<AttachmentEntity> attachments) {
		this.attachments = attachments;
	}

}