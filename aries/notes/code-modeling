
Includes an AST example:
http://stackoverflow.com/questions/121324/a-java-api-to-generate-java-source-files
http://stackoverflow.com/questions/964747/how-can-i-use-the-java-eclipse-abstract-syntax-tree-in-a-project-outside-eclipse?rq=1

How to access the AST for each source file:
http://www.vogella.com/articles/EclipseJDT/article.html


Automated test condition creation

Scan source lines
-----------------

    global structures:
        -declarations of user-defined CacheUnits and DataUnits and global structures
        -map of local declarations per code-block
        -map of local conditions per code-block


    First Pass
    ----------

    -identify and log declarations
        -each declaration may end up being a chain of declarations
        -each declaration will have a name/key and a primary value
        -a primary will consist of name and a selector
        -a selector will be a method call (a chain of child objects may be included)

    -identify and log conditions
        -each condition will contain 1 or more parts
        -each part 


    Second Pass
    -----------

    -build declaration chains

    -build condition sets

        for each set in each condition
            -establish values of both expressions

            for each expression
                -if primary is primitive or constant, then easy...
                -otherwise, take the primary and find it in globals or locals
                -if selector is common, then easy...
                -otherwise, 
                    -we assume primary is user-defined
                    -we assume selector is an autogenerated method call
                        -starting with: get, getMatching, getAll, addTo, or removeFrom
                    -we strip off the prefix (and possible suffix) to get the field name
                    -we then establish




set of common selector methods
size()
valueOf()
toString()
indexOf()
lastIndexOf()
intValue()
doubleValue()
floatValue()
byteValue()
shortValue()
etc...
