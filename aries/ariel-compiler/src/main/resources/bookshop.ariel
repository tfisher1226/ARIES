import admin_service.aries;

import bookshop_information.aries;
import bookshop_seller_information.aries;
import bookshop_seller_persistence.aries;

protocol Bookshop2 {
	set domain(aries);
	set namespace(bookshop);

    /*
    role buyer {
    }

    role seller {
    }
    */

    channel Public {
        add client(Buyer);
        add service(Seller);
    }

    channel Inventory {
        add client(Seller);
        add service(Supplier);
    }

    channel Shipment {
        add client(Supplier);
        add service(Shipper);
    }

    participant Buyer {
        add channel(Public);
		set namespace(buyer);

        receive orderBooks(OrderRequest orderRequest) {
            invoke Seller.orderBooks(orderRequest) {
                message OrderAccepted: {
                	//PurchaseRequest purchaseRequest = new PurchaseRequest();
                    //purchaseBooks(purchaseRequest);
                    purchaseBooks(books);
                }
                message OrderRejected: {
                    if ($response.
                    //reply $response;
                }
            }
        }

        purchaseBooks(PurchaseRequest purchaseRequest) {
            invoke Seller.purchaseBooks(purchaseRequest) {
                message PurchaseAccepted: {
                    //reply $response;
                }
                message PurchaseRejected: {
                    //reply $response;
                }
            }
        }
    }

    participant Seller {
        add channel(Public);
        add channel(Inventory);
		set namespace(seller);

        receive orderBooks(OrderRequest orderRequest) {
       		//bookCache.addToAvailableBooks(orderRequest.books);

            invoke SupplierGroup.queryBooks(orderRequest) {
            	set timeout(3m);
            	set minResponse(4);
            	set maxResponse(10);

                message BooksAvailable: {
                    option: {
               		    //ReservationRequest reservationRequest = new ReservationRequest();
               		    //send SupplierGroup.reserveBooks(reservationRequest);
                        //send SupplierGroup.reserveBooks(ReservationRequest(books));

               		    bookCache.addToAvailableBooks(books);
               		    send SupplierGroup.reserveBooks(books);
                        reply OrderAccepted(books);
                    }
                }

                timeout: {
                    option: reply OrderAccepted;
                    option: reply OrderRejected;
                }

                exception: {
                    reply OrderRejected;
                }
            }
        }

        receive purchaseBooks(PurchaseRequest purchaseRequest) {
            option: reply PurchaseAccepted;
            option: reply PurchaseRejected;
        }

   		cache BookCache { 
    		set scope(invocation); 
	    	set transaction(required); 
		    items {
			    admin:User user; 
			    List<bookshop:Book> bookOrders; 
			    Set<bookshop:Book> availableBooks; 
			    Set<bookshop:Book> unavailableBooks; 
		    }
	    }
    }

    group SupplierGroup {
        set participant(Supplier);
        set restriction(product.onSale);
    }

    participant Supplier {
        add channel(Inventory);
        add channel(Shipment);
		set namespace(supplier);

        receive queryBooks(OrderRequest orderRequest) {
           	//Map<xs:String, bookshop:Book> books = supplierOrderCache.getFromBooksInStock(orderRequest.books);
           	//bookshop:Book books = supplierOrderCache.getFromBooksInStock(orderRequest.books);
           	//BooksAvailable booksAvailable = new BooksAvailable();
           	//booksAvailable.setBooks(bookList);

           	List<bookshop:Book> books = supplierOrderCache.getFromBooksInStock(books);
           	reply BooksAvailable(books);
        }

        receive reserveBooks(ReservationRequest reservationRequest) {
        }

        receive shipBooks(ShipmentRequest shipmentRequest) {
            invoke Shipper.shipBooks(shipmentRequest) {
				set transaction(required); 
				set timeout(5m); 

                message ShipmentComplete: {
                	option: {
	                    supplierOrderCache.addToCurrentBookOrders(orders);
	                	//bookOrderLog.log(Payment);
	                	post ShipmentComplete(orders);
	                	//reply ShipmentComplete;
	                }
	            }
	        }
		}
		
		cache SupplierOrderCache { 
			set scope(application); 
			set transaction(required); 
			set backingStore(bookOrderLog);
			items {
				List<bookshop:Book> currentBookOrders; 
				Map<bookshop:BookKey, bookshop:Book> booksInStock;
			}
		}

		persist BookOrderLog {
			add role(seller);
		    add role(administrator);
			set scope(application); 
			set transaction(mandatory); 
		    set source(BookshopDS);
		    set adapter(bookshop);
			items {
				List<bookshop:Book> allBookOrders {
					index(title);
					index(author);
				} 
				Map<xs:String, bookshop:Book> booksInStock {
					index(title);
					index(author);
				}
			}
		}
    }

    participant Shipper {
        add channel(Shipment);
		set namespace(shipper);

        receive shipBooks(ShipmentRequest shipmentRequest) {
            reply ShipmentComplete;
            //reply ShipmentComplete[Summary, Invoice, Receipt];
        }
    }

}
